{"version":3,"sources":["firebase.js","components/times-list.js","components/add-time-entry-form.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","SORT_OPTIONS","column","direction","TimesList","useState","sortBy","setSortBy","times","setTimes","useEffect","unsubscribe","firestore","collection","orderBy","onSnapshot","snapshot","newTimes","docs","map","doc","id","data","useTimes","value","onChange","e","currentTarget","disabled","time","key","className","title","time_seconds","AddTimeEntryForm","setTitle","setTime","onSubmit","preventDefault","add","parseInt","then","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAgBAA,IAASC,cAZY,CACjBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMJT,QAAf,E,eCZMU,EAAe,CACjB,SAAY,CAAEC,OAAQ,eAAgBC,UAAW,OAChD,UAAa,CAAED,OAAQ,eAAgBC,UAAW,QAElD,UAAa,CAAED,OAAQ,QAASC,UAAW,OAC3C,WAAc,CAAED,OAAQ,QAASC,UAAW,SA8BjD,IAmCeC,EAnCG,WAAO,IAAD,EAEQC,mBAAS,YAFjB,mBAEbC,EAFa,KAELC,EAFK,KAGdC,EA9BV,WAAwC,IAAtBF,EAAqB,uDAAZ,WAAY,EACTD,mBAAS,IADA,mBAC5BG,EAD4B,KACrBC,EADqB,KAwBnC,OArBAC,qBAAU,WACN,IAAMC,EAAcpB,EACfqB,YACAC,WAAW,SACXC,QAAQb,EAAaK,GAAQJ,OAAQD,EAAaK,GAAQH,WAC1DY,YAAW,SAACC,GACT,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBAC/BC,GAAID,EAAIC,IACLD,EAAIE,WAGXb,EAASQ,MAOjB,OAAO,kBAAMN,OACd,CAACL,IAEGE,EAMOe,CAASjB,GAEvB,OACI,6BACI,0CACA,6BACI,2CACA,4BAAQkB,MAAOlB,EAAQmB,SAAU,SAAAC,GAAC,OAAInB,EAAUmB,EAAEC,cAAcH,SAC5D,4BAAQA,MAAM,YAAd,cACA,4BAAQA,MAAM,aAAd,eACA,4BAAQI,UAAQ,GAAhB,OACA,4BAAQJ,MAAM,aAAd,eACA,4BAAQA,MAAM,cAAd,iBAIR,4BAEQhB,EAAMW,KAAI,SAAAU,GAAI,OACV,wBAAIC,IAAKD,EAAKR,IACV,yBAAKU,UAAU,cACVF,EAAKG,MACN,0BAAMD,UAAU,QAASF,EAAKI,aAA9B,oBCvBjBC,EArCU,WAAO,IAAD,EAEC7B,mBAAS,IAFV,mBAEnB2B,EAFmB,KAEZG,EAFY,OAGD9B,mBAAS,IAHR,mBAGnBwB,EAHmB,KAGbO,EAHa,KAqB3B,OACI,0BAAMC,SAjBO,SAACX,GACdA,EAAEY,iBAEF/C,EACKqB,YACAC,WAAW,SACX0B,IAAI,CACDP,QACAC,aAAcO,SAASX,KAE1BY,MAAK,WACFN,EAAS,IACTC,EAAQ,SAMZ,8CACA,6BACI,wCACA,2BAAOM,KAAK,OAAOlB,MAAOQ,EAAOP,SAAU,SAAAC,GAAC,OAAIS,EAAST,EAAEC,cAAcH,WAE7E,6BACI,uCACA,2BAAOkB,KAAK,SAASlB,MAAOK,EAAMJ,SAAU,SAAAC,GAAC,OAAIU,EAAQV,EAAEC,cAAcH,WAE7E,oD,MCpBGmB,MAVf,WACE,OACE,yBAAKZ,UAAU,OACb,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5474be8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBiJsLAUzf-f4fSJABPAJNO-7z5H7R_tTo\",\n    authDomain: \"just-clock-it-83972.firebaseapp.com\",\n    databaseURL: \"https://just-clock-it-83972.firebaseio.com\",\n    projectId: \"just-clock-it-83972\",\n    storageBucket: \"just-clock-it-83972.appspot.com\",\n    messagingSenderId: \"312243184818\",\n    appId: \"1:312243184818:web:ad8d64abdfb9ca77af95ab\",\n    measurementId: \"G-CJBX2FJNE1\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","// src/components/times-list.js\n\nimport React, { useState, useEffect } from 'react';\n\nimport firebase from '../firebase';\n\nconst SORT_OPTIONS = {\n    'TIME_ASC': { column: 'time_seconds', direction: 'asc' },\n     'TIME_DESC': { column: 'time_seconds', direction: 'desc' },\n\n     'TITLE_ASC': { column: 'title', direction: 'asc' },\n     'TITLE_DESC': { column: 'title', direction: 'desc' }\n}\n\nfunction useTimes(sortBy = \"TIME_ASC\") {\n    const [times, setTimes] = useState([]);\n\n    useEffect(() => {\n        const unsubscribe = firebase\n            .firestore()\n            .collection('times')\n            .orderBy(SORT_OPTIONS[sortBy].column, SORT_OPTIONS[sortBy].direction)\n            .onSnapshot((snapshot) => {\n                const newTimes = snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    ...doc.data()\n                }))\n\n                setTimes(newTimes);\n            })\n    /**this callback function gonna be run by React\n     * when this component is unmounted\n     * we wanna drop this subscription to firestore\n     * we dont' wanna leave these things\n     */\n        return () => unsubscribe()\n    }, [sortBy])\n\n    return times;\n}\n\nconst TimesList = () => {\n\n    const [sortBy, setSortBy] = useState('TIME_ASC');\n    const times = useTimes(sortBy);\n\n    return (\n        <div>\n            <h2>Times List</h2>\n            <div>\n                <label>Sort By:</label>\n                <select value={sortBy} onChange={e => setSortBy(e.currentTarget.value)}>\n                    <option value=\"TIME_ASC\">Time (ASC)</option>\n                    <option value=\"TIME_DESC\">Time (DESC)</option>\n                    <option disabled>---</option>\n                    <option value=\"TITLE_ASC\">Title (a-z)</option>\n                    <option value=\"TITLE_DESC\">Title (z-a)</option>\n                </select>\n            </div>\n\n            <ol>\n                {\n                    times.map(time => \n                        <li key={time.id}>\n                            <div className=\"time-entry\">\n                                {time.title}\n                                <code className=\"time\">{ time.time_seconds } seconds</code>\n                            </div>\n                        </li>\n                    )\n                }\n            </ol>\n        </div>\n    )\n}\n\nexport default TimesList;","// src/components/add-time-entry-form.js\n\nimport React, { useState } from 'react';\n\nimport firebase from '../firebase';\n\nconst AddTimeEntryForm = () => {\n\n    const [ title, setTitle ] = useState('');\n    const [ time, setTime ] = useState('');\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        firebase\n            .firestore()\n            .collection('times')\n            .add({\n                title,\n                time_seconds: parseInt(time)\n            })\n            .then(() => {\n                setTitle('')\n                setTime('')\n            })\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <h4>Add Time Entry</h4>\n            <div>\n                <label>Title</label>\n                <input type=\"text\" value={title} onChange={e => setTitle(e.currentTarget.value)} />\n            </div>\n            <div>\n                <label>Time</label>\n                <input type=\"number\" value={time} onChange={e => setTime(e.currentTarget.value)} />\n            </div>\n            <button>Add Time Entry</button>\n        </form>\n    )\n};\n\nexport default AddTimeEntryForm;","import React from 'react';\n\nimport firebase from './firebase';\n\nimport TimesList from './components/times-list';\nimport AddTimeEntryForm from './components/add-time-entry-form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Just Clock It</h1>\n      <TimesList />\n      <AddTimeEntryForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}